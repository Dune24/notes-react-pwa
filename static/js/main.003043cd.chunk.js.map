{"version":3,"sources":["components/NoteAdd/NoteAdd.js","components/Modal/Modal.js","components/NoteCard.js","components/NoteList.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["NoteAdd","props","getLastNoteIdOnLocalStorage","largestNum","Object","keys","localStorage","forEach","key","retrievedLocalStObj","getItem","parsedLocalStObj","JSON","parse","id","onAddNewFolder","setState","newFolderEdit","onInputChange","event","target","name","value","data","folder","onSave","NoteSave","state","renderNote","lastNoteId","this","toggleModal","className","onClick","htmlFor","onChange","type","placeholder","minLength","maxLength","notesFolders","map","style","justifyContent","React","Component","modalRoot","document","getElementById","Modal","el","createElement","appendChild","removeChild","ReactDOM","createPortal","children","NoteCard","deleteNote","onNoteDelete","updateNote","onNoteUpdate","editMode","toggleEdit","wordWrap","whiteSpace","wordBreak","NoteList","notes","note","visibleFolder","showAllFolders","App","loadNotesFromLocalStorage","length","arrayWithOldNotes","push","sort","a","b","parseFloat","oldFolders","includes","notesArray","noteId","Set","isModalOpen","onNoteSave","localStObj","setItem","stringify","noteToUpdate","newNotesArray","i","noteIdToDelete","removeItem","filter","onFolderChange","noteName","noteData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"yTA2JeA,E,kDAvJb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRC,4BAA8B,WAC5B,IAAIC,EAAa,EASjB,OARAC,OAAOC,KAAKC,cAAcC,SAAQ,SAACC,GACjC,IAAIC,EAAsBH,aAAaI,QAAQF,GAC3CG,EAAmBC,KAAKC,MAAMJ,GAE9BE,EAAiBG,GAAKX,IACxBA,EAAaQ,EAAiBG,OAG3BX,GA1BU,EA6BnBY,eAAiB,WACf,EAAKC,SAAS,CACZC,eAAe,KA/BA,EAmCnBC,cAAgB,SAACC,GACf,OAAQA,EAAMC,OAAOC,MACnB,IAAK,YACH,EAAKL,SAAS,CAAEK,KAAMF,EAAMC,OAAOE,QACnC,MACF,IAAK,YACH,EAAKN,SAAS,CAAEO,KAAMJ,EAAMC,OAAOE,QACnC,MACF,IAAK,cACH,EAAKN,SAAS,CAAEQ,OAAQL,EAAMC,OAAOE,QACrC,MACF,QACE,SA/Ca,EAmDnBG,OAAS,WACP,EAAKxB,MAAMyB,SAAS,CAClBL,KAAM,EAAKM,MAAMN,KACjBE,KAAM,EAAKI,MAAMJ,KACjBT,GAAI,EAAKa,MAAMb,GACfU,OAAQ,EAAKG,MAAMH,OACnBI,YAAY,IAEd,EAAKZ,SAAS,CAAEF,GAAI,EAAKa,MAAMb,GAAK,KAzDpC,EAAKa,MAAQ,CACXN,KAAM,GACNE,KAAM,GACNT,GAAI,EACJU,OAAQ,eACRP,eAAe,GAPA,E,qDAWnB,WACE,IAAIY,EAAaC,KAAK5B,8BACtB4B,KAAKd,SAAS,CAAEF,GAAIe,EAAa,M,oBAiDnC,WACE,IAAQE,EAAgBD,KAAK7B,MAArB8B,YACR,OACE,qBAAKC,UAAU,aAAf,SACE,0BAASA,UAAU,gEAAnB,UACE,qBAAKA,UAAU,qBAAqBC,QAASF,EAA7C,kBAGA,uBAAMC,UAAU,qBAAhB,UACE,0CACA,uBACA,uBAAOA,UAAU,kBAAkBE,QAAQ,YAA3C,mBAGA,uBACEC,SAAUL,KAAKZ,cACfkB,KAAK,OACLf,KAAK,YACLW,UAAU,eACVK,YAAY,YACZC,UAAU,IACVC,UAAU,OAEZ,uBAAOP,UAAU,kBAAkBE,QAAQ,YAA3C,mBAGA,0BACEC,SAAUL,KAAKZ,cACfG,KAAK,YACLW,UAAU,eACVK,YAAY,8BACZE,UAAU,SAEZ,uBAAOP,UAAU,sBAAsBE,QAAQ,cAA/C,qBAGA,wBACEb,KAAK,cACLP,GAAG,cACHqB,SAAUL,KAAKZ,cAHjB,SAKGY,KAAK7B,MAAMuC,aAAaC,KAAI,SAACjB,GAC5B,OACE,wBAAQF,MAAOE,EAAf,SACGA,GADyBA,QAMlC,wBACEQ,UAAU,wCACVC,QAASH,KAAKf,eAFhB,4BAMCe,KAAKH,MAAMV,eACV,uBACEkB,SAAUL,KAAKZ,cACfkB,KAAK,OACLf,KAAK,cACLW,UAAU,eACVK,YAAY,cACZC,UAAU,IACVC,UAAU,OAGd,sBACEP,UAAU,WACVU,MAAO,CAAEC,eAAgB,gBAF3B,UAIE,wBACEX,UAAU,iEACVC,QAASH,KAAKL,OAFhB,kBAMA,wBACEO,UAAU,+DACVC,QAASF,EAFX,mC,GA3IQa,IAAMC,WCCtBC,G,MAAYC,SAASC,eAAe,eAwB3BC,E,kDArBb,WAAYhD,GAAQ,IAAD,8BACjB,cAAMA,IACDiD,GAAKH,SAASI,cAAc,OAFhB,E,qDAKnB,WACEL,EAAUM,YAAYtB,KAAKoB,M,kCAG7B,WACEJ,EAAUO,YAAYvB,KAAKoB,M,oBAG7B,WACE,OAAOI,IAASC,aACdzB,KAAK7B,MAAMuD,SACX1B,KAAKoB,Q,GAjBSN,IAAMC,WCkLXY,E,kDArLb,WAAYxD,GAAQ,IAAD,8BACjB,cAAMA,IAqBRyD,WAAa,WACX,EAAKzD,MAAM0D,aAAa,EAAKhC,MAAMb,KAvBlB,EA0BnB8C,WAAa,WACX,EAAK3D,MAAM4D,aAAa,CACtBxC,KAAM,EAAKM,MAAMN,KACjBE,KAAM,EAAKI,MAAMJ,KACjBT,GAAI,EAAKa,MAAMb,GACfU,OAAQ,EAAKG,MAAMH,OACnBI,YAAY,IAEd,EAAKZ,SAAS,CAAE8C,UAAU,EAAO7C,eAAe,KAlC/B,EAqCnB8C,WAAa,WACX,EAAK/C,UAAS,SAACW,GAAD,mBAAC,eACVA,GADS,IAEZmC,UAAWnC,EAAMmC,eAxCF,EA4CnB/C,eAAiB,WACf,EAAKC,SAAS,CACZC,eAAe,KA9CA,EAkDnBC,cAAgB,SAACC,GACf,OAAQA,EAAMC,OAAOC,MACnB,IAAK,YACH,EAAKL,SAAS,CAAEK,KAAMF,EAAMC,OAAOE,QACnC,MACF,IAAK,YACH,EAAKN,SAAS,CAAEO,KAAMJ,EAAMC,OAAOE,QACnC,MACF,IAAK,cACH,EAAKN,SAAS,CAAEQ,OAAQL,EAAMC,OAAOE,QACrC,MACF,QACE,SA3DJ,EAAKK,MAAQ,CACXmC,UAAU,EACVzC,KAAM,GACNE,KAAM,GACNT,GAAI,EACJU,OAAQ,eACRP,eAAe,GATA,E,qDAanB,WACEa,KAAKd,SAAS,CACZK,KAAMS,KAAK7B,MAAMoB,KACjBE,KAAMO,KAAK7B,MAAMsB,KACjBT,GAAIgB,KAAK7B,MAAMa,GACfU,OAAQM,KAAK7B,MAAMuB,W,oBAgDvB,WACE,OACE,qBAAKQ,UAAU,+CAAf,SACIF,KAAKH,MAAMmC,SA6BX,gCACE,uBAAO9B,UAAU,sBAAsBE,QAAQ,YAA/C,mBAGA,uBACEC,SAAUL,KAAKZ,cACfkB,KAAK,OACLf,KAAK,YACLW,UAAU,eACVK,YAAY,YACZC,UAAU,IACVC,UAAU,KACVjB,MAAOQ,KAAKH,MAAMN,OAEpB,uBAAOW,UAAU,kBAAkBE,QAAQ,YAA3C,mBAGA,0BACEC,SAAUL,KAAKZ,cACfG,KAAK,YACLW,UAAU,eACVK,YAAY,8BACZE,UAAU,OACVjB,MAAOQ,KAAKH,MAAMJ,OAEpB,uBAAOS,UAAU,sBAAsBE,QAAQ,cAA/C,qBAGA,yBACEb,KAAK,cACLP,GAAG,cACHqB,SAAUL,KAAKZ,cAHjB,UAKE,wBAAQI,MAAM,eAAd,2BACCQ,KAAK7B,MAAMuC,aAAaC,KAAI,SAACjB,GAC5B,OACE,wBAAQF,MAAOE,EAAf,SACGA,GADyBA,SAMlC,wBACEQ,UAAU,yCACVC,QAASH,KAAKf,eAFhB,4BAMCe,KAAKH,MAAMV,eACV,uBACEkB,SAAUL,KAAKZ,cACfkB,KAAK,OACLf,KAAK,cACLW,UAAU,eACVK,YAAY,cACZC,UAAU,IACVC,UAAU,OAGd,sBACEP,UAAU,WACVU,MAAO,CAAEC,eAAgB,gBAF3B,UAIE,wBACEX,UAAU,2DACVC,QAASH,KAAK8B,WAFhB,kBAMA,wBACE5B,UAAU,+DACVC,QAASH,KAAKiC,WAFhB,0BAjGJ,qCACE,qBAAK/B,UAAU,gBAAgBC,QAASH,KAAK4B,WAA7C,kBAGA,qBAAK1B,UAAU,oBAAoBC,QAASH,KAAKiC,WAAjD,oBAGA,oBACE/B,UAAU,YACVU,MAAO,CACLsB,SAAU,aACVC,WAAY,WACZC,UAAW,cALf,SAQGpC,KAAKH,MAAMN,OAEd,mBACEqB,MAAO,CACLsB,SAAU,aACVC,WAAY,WACZC,UAAW,cAJf,SAOGpC,KAAKH,MAAMJ,gB,GA/FHqB,IAAMC,WCCvBsB,E,4JACJ,WAAU,IAAD,OACP,OACE,qBAAKnC,UAAU,4CAAf,SACGF,KAAK7B,MAAMmE,MAAM3B,KAAI,SAAC4B,GACrB,OACE,EAAKpE,MAAMqE,gBAAkBD,EAAK7C,QAClC,EAAKvB,MAAMsE,eAGT,cAAC,EAAD,CAEEzD,GAAIuD,EAAKvD,GACTO,KAAMgD,EAAKhD,KACXE,KAAM8C,EAAK9C,KACXC,OAAQ6C,EAAK7C,OACbgB,aAAc,EAAKvC,MAAMuC,aACzBmB,aAAc,EAAK1D,MAAM0D,aACzBE,aAAc,EAAK5D,MAAM4D,cAPpBQ,EAAKvD,IAWP,c,GAtBI8B,IAAMC,WA8BdsB,IC8KAK,G,wDAxMb,aAAe,IAAD,8BACZ,gBAkBFC,0BAA4B,WAC1B,GAA4B,IAAxBnE,aAAaoE,OAAjB,CACE,IAAIC,EAAoB,GACxBvE,OAAOC,KAAKC,cAAcC,SAAQ,SAACC,GACjC,IAAIC,EAAsBH,aAAaI,QAAQF,GAC3CG,EAAmBC,KAAKC,MAAMJ,GAClCkE,EAAkBC,KAAK,CACrB9D,GAAIH,EAAiBG,GACrBO,KAAMV,EAAiBU,KACvBE,KAAMZ,EAAiBY,KACvBC,OAAQb,EAAiBa,OACzBI,YAAY,OAGhB+C,EAAkBE,MAAK,SAACC,EAAGC,GAAJ,OAAUC,WAAWF,EAAEhE,IAAMkE,WAAWD,EAAEjE,OAIjE,IAFA,IAAImE,EAAa,GAEjB,MAAiBN,EAAjB,eAAoC,CAA/B,IAAIN,EAAI,KACN,EAAK1C,MAAMa,aAAa0C,SAASb,EAAK7C,SACzCyD,EAAWL,KAAKP,EAAK7C,QAIzB,EAAKR,SAAS,CACZmE,WAAYR,EACZS,OAAQT,EAAkBD,OAC1BlC,aAAa,GAAD,mBAAM,EAAKb,MAAMa,cAAjB,YAAkC,IAAI6C,IAAIJ,SA9C9C,EAqDdlD,YAAc,WACZ,EAAKf,UAAS,SAACW,GAAD,mBAAC,eACVA,GADS,IAEZ2D,aAAc3D,EAAM2D,kBAxDV,EA4DdC,WAAa,SAAClB,GACZ,EAAKrD,SAAS,CACZmE,WAAW,GAAD,mBAAM,EAAKxD,MAAMwD,YAAjB,CAA6Bd,IACvCe,OAAQf,EAAKvD,GAAK,EAClBwE,aAAa,IAEV,EAAK3D,MAAMa,aAAa0C,SAASb,EAAK7C,SACzC,EAAKR,SAAS,CACZwB,aAAa,GAAD,mBAAM,EAAKb,MAAMa,cAAjB,CAA+B6B,EAAK7C,WAGpD,IAAIgE,EAAa,CACfnE,KAAMgD,EAAKhD,KACXE,KAAM8C,EAAK9C,KACXT,GAAIuD,EAAKvD,GACTU,OAAQ6C,EAAK7C,QAEflB,aAAamF,QAAb,eAA6BpB,EAAKvD,IAAMF,KAAK8E,UAAUF,KA7E3C,EAgFd3B,aAAe,SAAC8B,GAGd,IAFA,IAAIC,EAAgB,GAEXC,EAAI,EAAGA,EAAI,EAAKlE,MAAMwD,WAAWT,OAAQmB,IAC5C,EAAKlE,MAAMwD,WAAWU,GAAG/E,KAAO6E,EAAa7E,GAC/C8E,EAAchB,KAAKe,GAEnBC,EAAchB,KAAK,EAAKjD,MAAMwD,WAAWU,IAGxC,EAAKlE,MAAMa,aAAa0C,SAASS,EAAanE,SACjD,EAAKR,SAAS,CACZwB,aAAa,GAAD,mBAAM,EAAKb,MAAMa,cAAjB,CAA+BmD,EAAanE,WAG5D,IAAIgE,EAAa,CACfnE,KAAMsE,EAAatE,KACnBE,KAAMoE,EAAapE,KACnBT,GAAI6E,EAAa7E,GACjBU,OAAQmE,EAAanE,QAEvBlB,aAAamF,QAAb,eAA6BE,EAAa7E,IAAMF,KAAK8E,UAAUF,IAE/D,EAAKxE,SAAS,CAAEmE,WAAYS,KAvGhB,EA0GdjC,aAAe,SAACmC,GACd1F,OAAOC,KAAKC,cAAcC,SAAQ,SAAC8D,GACjC,IAAI5D,EAAsBH,aAAaI,QAAQ2D,GAC3C1D,EAAmBC,KAAKC,MAAMJ,GAE9BqF,IAAmBnF,EAAiBG,IACtCR,aAAayF,WAAW1B,MAG5B,IAAMuB,EAAgB,EAAKjE,MAAMwD,WAAWa,QAAO,SAAC3B,GAClD,OAAOA,EAAKvD,KAAOgF,KAErB,EAAK9E,SAAS,CAAEmE,WAAYS,KAtHhB,EAyHdK,eAAiB,SAAC9E,GACW,iBAAvBA,EAAMC,OAAOE,MACf,EAAKN,SAAS,CACZsD,cAAenD,EAAMC,OAAOE,MAC5BiD,gBAAgB,IAGlB,EAAKvD,SAAS,CACZuD,gBAAgB,KA/HpB,EAAK5C,MAAQ,CACX2D,aAAa,EACbF,OAAQ,EACRc,SAAU,GACVC,SAAU,GACVvE,YAAY,EACZuD,WAAY,GACZ3C,aAAc,CAAC,gBACf8B,cAAe,eACfC,gBAAgB,GAXN,E,qDAed,WACEzC,KAAK2C,8B,oBAsHP,WACE,MAOI3C,KAAKH,MANP2D,EADF,EACEA,YACAH,EAFF,EAEEA,WACAC,EAHF,EAGEA,OACA5C,EAJF,EAIEA,aACA+B,EALF,EAKEA,eACAD,EANF,EAMEA,cAEF,OACE,sBAAKtC,UAAU,MAAf,UACE,yBAAQA,UAAU,KAAlB,UACE,oBAAIA,UAAU,QAAd,mBACA,wBACEC,QAASH,KAAKC,YACdC,UAAU,gDAFZ,yBAODF,KAAKH,MAAM2D,aACV,cAAC,EAAD,UACE,cAAC,EAAD,CACEvD,YAAaD,KAAKC,YAClBL,SAAUI,KAAKyD,WACfD,YAAaA,EACbxE,GAAIsE,EACJ5C,aAAcA,MAIpB,sBAAK1B,GAAG,mBAAR,UACE,sBAAKkB,UAAU,aAAf,UACE,uBAAOE,QAAQ,gBAAgBF,UAAU,UAAzC,8BAGA,uBACA,yBACEX,KAAK,UACLP,GAAG,gBACHqB,SAAUL,KAAKmE,eAHjB,UAKE,wBAAQ3E,MAAM,eAAd,2BACCQ,KAAKH,MAAMa,aAAaC,KAAI,SAACjB,GAC5B,OACE,wBAAQF,MAAOE,EAAf,SACGA,GADyBA,YAOpC,cAAC,EAAD,CACE4C,MAAOe,EACP3C,aAAcA,EACd8B,cAAeA,EACfC,eAAgBA,EAChBZ,aAAc7B,KAAK6B,aACnBE,aAAc/B,KAAK+B,yB,GAjMbhB,cCMHuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKRQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTb,MAAK,SAACkB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhG,QACf2F,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,+GAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,MCxFjE9E,IAAS+E,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvF,SAASC,eAAe,SDUnB,SAAkBqE,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,mBAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,mBAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BtC,MAAK,SAACuC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM5C,MAAK,SAACkB,GAClCA,EAAa2B,aAAa7C,MAAK,WAC7BQ,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM5C,MAAK,WACjCwB,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,OCpC/BkC,GAIAnD,M","file":"static/js/main.003043cd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NoteAdd.css\";\n\nclass NoteAdd extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      data: \"\",\n      id: 0,\n      folder: \"--Unsorted--\",\n      newFolderEdit: false,\n    };\n  }\n\n  componentDidMount() {\n    let lastNoteId = this.getLastNoteIdOnLocalStorage();\n    this.setState({ id: lastNoteId + 1 });\n  }\n\n  getLastNoteIdOnLocalStorage = () => {\n    let largestNum = 0;\n    Object.keys(localStorage).forEach((key) => {\n      let retrievedLocalStObj = localStorage.getItem(key);\n      let parsedLocalStObj = JSON.parse(retrievedLocalStObj);\n\n      if (parsedLocalStObj.id > largestNum) {\n        largestNum = parsedLocalStObj.id;\n      }\n    });\n    return largestNum;\n  };\n\n  onAddNewFolder = () => {\n    this.setState({\n      newFolderEdit: true,\n    });\n  };\n\n  onInputChange = (event) => {\n    switch (event.target.name) {\n      case \"note-name\":\n        this.setState({ name: event.target.value });\n        break;\n      case \"note-data\":\n        this.setState({ data: event.target.value });\n        break;\n      case \"note-folder\":\n        this.setState({ folder: event.target.value });\n        break;\n      default:\n        return;\n    }\n  };\n\n  onSave = () => {\n    this.props.NoteSave({\n      name: this.state.name,\n      data: this.state.data,\n      id: this.state.id,\n      folder: this.state.folder,\n      renderNote: true,\n    });\n    this.setState({ id: this.state.id + 1 });\n  };\n\n  render() {\n    const { toggleModal } = this.props;\n    return (\n      <div className=\"note-modal\">\n        <article className=\"br3 ba bg-white b--black-10 w-100 w-75-m mw7 shadow-5 center \">\n          <div className=\"modal-close fr pr2\" onClick={toggleModal}>\n            &times;\n          </div>\n          <main className=\"pa4 black-80 w-100\">\n            <h1>Add note</h1>\n            <hr />\n            <label className=\"fw6 dib pt2 pb2\" htmlFor=\"note-name\">\n              Name:\n            </label>\n            <input\n              onChange={this.onInputChange}\n              type=\"text\"\n              name=\"note-name\"\n              className=\"pa2 ba w-100\"\n              placeholder=\"Note Name\"\n              minLength=\"4\"\n              maxLength=\"75\"\n            ></input>\n            <label className=\"fw6 dib pt2 pb2\" htmlFor=\"note-data\">\n              Text:\n            </label>\n            <textarea\n              onChange={this.onInputChange}\n              name=\"note-data\"\n              className=\"pa2 ba w-100\"\n              placeholder=\"Enter text (max 1000 char.)\"\n              maxLength=\"1000\"\n            ></textarea>\n            <label className=\"fw6 dib pt2 pb2 pr2\" htmlFor=\"note-folder\">\n              Folder:\n            </label>\n            <select\n              name=\"note-folder\"\n              id=\"note-folder\"\n              onChange={this.onInputChange}\n            >\n              {this.props.notesFolders.map((folder) => {\n                return (\n                  <option value={folder} key={folder}>\n                    {folder}\n                  </option>\n                );\n              })}\n            </select>\n            <button\n              className=\"b grow ma2 bg-light-green b--black-20\"\n              onClick={this.onAddNewFolder}\n            >\n              Add new folder\n            </button>\n            {this.state.newFolderEdit && (\n              <input\n                onChange={this.onInputChange}\n                type=\"text\"\n                name=\"note-folder\"\n                className=\"pa2 ba w-100\"\n                placeholder=\"Folder Name\"\n                minLength=\"3\"\n                maxLength=\"30\"\n              ></input>\n            )}\n            <div\n              className=\"mt4 flex\"\n              style={{ justifyContent: \"space-evenly\" }}\n            >\n              <button\n                className=\"b pa2 grow pointer hover-white w-40 bg-light-green b--black-20\"\n                onClick={this.onSave}\n              >\n                Save\n              </button>\n              <button\n                className=\"b pa2 grow pointer hover-white w-40 bg-light-red b--black-20\"\n                onClick={toggleModal}\n              >\n                Cancel\n              </button>\n            </div>\n          </main>\n        </article>\n      </div>\n    );\n  }\n}\nexport default NoteAdd;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Modal.css';\r\n\r\nconst modalRoot = document.getElementById('modal-root');\r\n\r\nclass Modal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.el = document.createElement('div');\r\n  }\r\n\r\n  componentDidMount() {\r\n    modalRoot.appendChild(this.el);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    modalRoot.removeChild(this.el);\r\n  }\r\n\r\n  render() {\r\n    return ReactDOM.createPortal(\r\n      this.props.children,\r\n      this.el,\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;","import React from \"react\";\n\nclass NoteCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editMode: false,\n      name: \"\",\n      data: \"\",\n      id: 0,\n      folder: \"--Unsorted--\",\n      newFolderEdit: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      name: this.props.name,\n      data: this.props.data,\n      id: this.props.id,\n      folder: this.props.folder,\n    });\n  }\n\n  deleteNote = () => {\n    this.props.onNoteDelete(this.state.id);\n  };\n\n  updateNote = () => {\n    this.props.onNoteUpdate({\n      name: this.state.name,\n      data: this.state.data,\n      id: this.state.id,\n      folder: this.state.folder,\n      renderNote: true,\n    });\n    this.setState({ editMode: false, newFolderEdit: false });\n  };\n\n  toggleEdit = () => {\n    this.setState((state) => ({\n      ...state,\n      editMode: !state.editMode,\n    }));\n  };\n\n  onAddNewFolder = () => {\n    this.setState({\n      newFolderEdit: true,\n    });\n  };\n\n  onInputChange = (event) => {\n    switch (event.target.name) {\n      case \"note-name\":\n        this.setState({ name: event.target.value });\n        break;\n      case \"note-data\":\n        this.setState({ data: event.target.value });\n        break;\n      case \"note-folder\":\n        this.setState({ folder: event.target.value });\n        break;\n      default:\n        return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"bg-light-green br3 pa3 ma3 mw5 w-50 shadow-5\">\n        {!this.state.editMode ? (\n          <>\n            <div className=\"fr f2 pointer\" onClick={this.deleteNote}>\n              &times;\n            </div>\n            <div className=\"fl f3 mt1 pointer\" onClick={this.toggleEdit}>\n              &#x270E;\n            </div>\n            <h2\n              className=\"tc bb pb2\"\n              style={{\n                wordWrap: \"break-word\",\n                whiteSpace: \"pre-wrap\",\n                wordBreak: \"break-word\",\n              }}\n            >\n              {this.state.name}\n            </h2>\n            <p\n              style={{\n                wordWrap: \"break-word\",\n                whiteSpace: \"pre-wrap\",\n                wordBreak: \"break-word\",\n              }}\n            >\n              {this.state.data}\n            </p>\n          </>\n        ) : (\n          <div>\n            <label className=\"dib mt2 fw6 dib pb2\" htmlFor=\"note-name\">\n              Name:\n            </label>\n            <input\n              onChange={this.onInputChange}\n              type=\"text\"\n              name=\"note-name\"\n              className=\"pa2 ba w-100\"\n              placeholder=\"Note Name\"\n              minLength=\"4\"\n              maxLength=\"75\"\n              value={this.state.name}\n            ></input>\n            <label className=\"mt2 fw6 dib pb2\" htmlFor=\"note-data\">\n              Text:\n            </label>\n            <textarea\n              onChange={this.onInputChange}\n              name=\"note-data\"\n              className=\"pa2 ba w-100\"\n              placeholder=\"Enter text (max 1000 char.)\"\n              maxLength=\"1000\"\n              value={this.state.data}\n            ></textarea>\n            <label className=\"fw6 dib pt2 pb2 pr2\" htmlFor=\"note-folder\">\n              Folder:\n            </label>\n            <select\n              name=\"note-folder\"\n              id=\"note-folder\"\n              onChange={this.onInputChange}\n            >\n              <option value=\"--Unsorted--\">Select folder</option>\n              {this.props.notesFolders.map((folder) => {\n                return (\n                  <option value={folder} key={folder}>\n                    {folder}\n                  </option>\n                );\n              })}\n            </select>\n            <button\n              className=\"b grow b--black-20 flex center mt2 mb2\"\n              onClick={this.onAddNewFolder}\n            >\n              Add new folder\n            </button>\n            {this.state.newFolderEdit && (\n              <input\n                onChange={this.onInputChange}\n                type=\"text\"\n                name=\"note-folder\"\n                className=\"pa2 ba w-100\"\n                placeholder=\"Folder Name\"\n                minLength=\"3\"\n                maxLength=\"25\"\n              ></input>\n            )}\n            <div\n              className=\"mt4 flex\"\n              style={{ justifyContent: \"space-evenly\" }}\n            >\n              <button\n                className=\"b pa2 grow pointer hover-white w-40 bg-green b--black-20\"\n                onClick={this.updateNote}\n              >\n                Save\n              </button>\n              <button\n                className=\"b pa2 grow pointer hover-white w-40 bg-light-red b--black-20\"\n                onClick={this.toggleEdit}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NoteCard;\n","import React from \"react\";\nimport NoteCard from \"./NoteCard\";\n\nclass NoteList extends React.Component {\n  render() {\n    return (\n      <div className=\"flex flex-wrap items-start justify-around\">\n        {this.props.notes.map((note) => {\n          if (\n            this.props.visibleFolder === note.folder ||\n            this.props.showAllFolders\n          ) {\n            return (\n              <NoteCard\n                key={note.id}\n                id={note.id}\n                name={note.name}\n                data={note.data}\n                folder={note.folder}\n                notesFolders={this.props.notesFolders}\n                onNoteDelete={this.props.onNoteDelete}\n                onNoteUpdate={this.props.onNoteUpdate}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </div>\n    );\n  }\n}\n\nexport default NoteList;\n","import React, { Component } from \"react\";\nimport NoteAdd from \"./components/NoteAdd/NoteAdd\";\nimport Modal from \"./components/Modal/Modal\";\nimport NoteList from \"./components/NoteList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isModalOpen: false,\n      noteId: 0,\n      noteName: \"\",\n      noteData: \"\",\n      renderNote: true,\n      notesArray: [],\n      notesFolders: [\"--Unsorted--\"],\n      visibleFolder: \"--Unsorted--\",\n      showAllFolders: true,\n    };\n  }\n\n  componentDidMount() {\n    this.loadNotesFromLocalStorage();\n  }\n\n  loadNotesFromLocalStorage = () => {\n    if (localStorage.length !== 0) {\n      let arrayWithOldNotes = [];\n      Object.keys(localStorage).forEach((key) => {\n        let retrievedLocalStObj = localStorage.getItem(key);\n        let parsedLocalStObj = JSON.parse(retrievedLocalStObj);\n        arrayWithOldNotes.push({\n          id: parsedLocalStObj.id,\n          name: parsedLocalStObj.name,\n          data: parsedLocalStObj.data,\n          folder: parsedLocalStObj.folder,\n          renderNote: true,\n        });\n      });\n      arrayWithOldNotes.sort((a, b) => parseFloat(a.id) - parseFloat(b.id));\n\n      let oldFolders = [];\n\n      for (let note of arrayWithOldNotes) {\n        if (!this.state.notesFolders.includes(note.folder)) {\n          oldFolders.push(note.folder);\n        }\n      }\n\n      this.setState({\n        notesArray: arrayWithOldNotes,\n        noteId: arrayWithOldNotes.length,\n        notesFolders: [...this.state.notesFolders, ...new Set(oldFolders)],\n      });\n    } else {\n      return;\n    }\n  };\n\n  toggleModal = () => {\n    this.setState((state) => ({\n      ...state,\n      isModalOpen: !state.isModalOpen,\n    }));\n  };\n\n  onNoteSave = (note) => {\n    this.setState({\n      notesArray: [...this.state.notesArray, note],\n      noteId: note.id + 1,\n      isModalOpen: false,\n    });\n    if (!this.state.notesFolders.includes(note.folder)) {\n      this.setState({\n        notesFolders: [...this.state.notesFolders, note.folder],\n      });\n    }\n    let localStObj = {\n      name: note.name,\n      data: note.data,\n      id: note.id,\n      folder: note.folder,\n    };\n    localStorage.setItem(`Note ${note.id}`, JSON.stringify(localStObj));\n  };\n\n  onNoteUpdate = (noteToUpdate) => {\n    let newNotesArray = [];\n\n    for (let i = 0; i < this.state.notesArray.length; i++) {\n      if (this.state.notesArray[i].id === noteToUpdate.id) {\n        newNotesArray.push(noteToUpdate);\n      } else {\n        newNotesArray.push(this.state.notesArray[i]);\n      }\n    }\n    if (!this.state.notesFolders.includes(noteToUpdate.folder)) {\n      this.setState({\n        notesFolders: [...this.state.notesFolders, noteToUpdate.folder],\n      });\n    }\n    let localStObj = {\n      name: noteToUpdate.name,\n      data: noteToUpdate.data,\n      id: noteToUpdate.id,\n      folder: noteToUpdate.folder,\n    };\n    localStorage.setItem(`Note ${noteToUpdate.id}`, JSON.stringify(localStObj));\n\n    this.setState({ notesArray: newNotesArray });\n  };\n\n  onNoteDelete = (noteIdToDelete) => {\n    Object.keys(localStorage).forEach((note) => {\n      let retrievedLocalStObj = localStorage.getItem(note);\n      let parsedLocalStObj = JSON.parse(retrievedLocalStObj);\n\n      if (noteIdToDelete === parsedLocalStObj.id) {\n        localStorage.removeItem(note);\n      }\n    });\n    const newNotesArray = this.state.notesArray.filter((note) => {\n      return note.id !== noteIdToDelete;\n    });\n    this.setState({ notesArray: newNotesArray });\n  };\n\n  onFolderChange = (event) => {\n    if (event.target.value !== \"--Unsorted--\") {\n      this.setState({\n        visibleFolder: event.target.value,\n        showAllFolders: false,\n      });\n    } else {\n      this.setState({\n        showAllFolders: true,\n      });\n    }\n  };\n\n  render() {\n    const {\n      isModalOpen,\n      notesArray,\n      noteId,\n      notesFolders,\n      showAllFolders,\n      visibleFolder,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"tc\">\n          <h1 className=\"f1 tc\">Notes</h1>\n          <button\n            onClick={this.toggleModal}\n            className=\"b pa2 grow pointer bg-light-green b--black-20\"\n          >\n            Add Note\n          </button>\n        </header>\n        {this.state.isModalOpen && (\n          <Modal>\n            <NoteAdd\n              toggleModal={this.toggleModal}\n              NoteSave={this.onNoteSave}\n              isModalOpen={isModalOpen}\n              id={noteId}\n              notesFolders={notesFolders}\n            />\n          </Modal>\n        )}\n        <div id=\"folder-container\">\n          <div className=\"tc pt3 pb3\">\n            <label htmlFor=\"folder-select\" className=\"dib mb3\">\n              Select a folder:\n            </label>\n            <br />\n            <select\n              name=\"folders\"\n              id=\"folder-select\"\n              onChange={this.onFolderChange}\n            >\n              <option value=\"--Unsorted--\">Select folder</option>\n              {this.state.notesFolders.map((folder) => {\n                return (\n                  <option value={folder} key={folder}>\n                    {folder}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n          <NoteList\n            notes={notesArray}\n            notesFolders={notesFolders}\n            visibleFolder={visibleFolder}\n            showAllFolders={showAllFolders}\n            onNoteDelete={this.onNoteDelete}\n            onNoteUpdate={this.onNoteUpdate}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport \"tachyons\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorkerRegistration.register();\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}