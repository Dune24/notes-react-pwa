{"version":3,"sources":["components/NoteAdd/NoteAdd.js","components/Modal/Modal.js","components/NoteCard.js","components/NoteList.js","App.js","reportWebVitals.js","index.js"],"names":["NoteAdd","props","onInputChange","event","target","name","setState","value","data","onSave","NoteSave","state","id","renderNote","this","toggleModal","className","onClick","htmlFor","onChange","type","placeholder","minLength","maxLength","style","justifyContent","React","Component","modalRoot","document","getElementById","Modal","el","createElement","appendChild","removeChild","ReactDOM","createPortal","children","NoteCard","deleteNote","onNoteDelete","updateNote","onNoteUpdate","editMode","toggleEdit","wordWrap","whiteSpace","wordBreak","NoteList","notes","map","note","i","App","loadNotesFromLocalStorage","localStorage","length","arrayWithOldNotes","Object","keys","forEach","key","push","getItem","slice","split","sort","a","b","parseFloat","notesArray","noteId","isModalOpen","onNoteSave","setItem","noteToUpdate","newNotesArray","noteIdToDelete","removeItem","noteName","noteData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.6edfe0e8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NoteAdd.css\";\n\nclass NoteAdd extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      data: \"\",\n      id: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ id: this.props.id });\n  }\n\n  onInputChange = (event) => {\n    switch (event.target.name) {\n      case \"note-name\":\n        this.setState({ name: event.target.value });\n        break;\n      case \"note-data\":\n        this.setState({ data: event.target.value });\n        break;\n      default:\n        return;\n    }\n  };\n\n  onSave = () => {\n    this.props.NoteSave({\n      name: this.state.name,\n      data: this.state.data,\n      id: this.state.id,\n      renderNote: true,\n    });\n    this.setState({ id: this.state.id + 1 });\n  };\n\n  render() {\n    const { toggleModal } = this.props;\n    return (\n      <div className=\"note-modal\">\n        <article className=\"br3 ba bg-white b--black-10 w-100 w-75-m mw7 shadow-5 center\">\n          <div className=\"modal-close fr pr2\" onClick={toggleModal}>\n            &times;\n          </div>\n          <main className=\"pa4 black-80 w-100\">\n            <h1>Add note</h1>\n            <hr />\n            <label className=\"mt2 fw6\" htmlFor=\"note-name\">\n              Name:\n            </label>\n            <input\n              onChange={this.onInputChange}\n              type=\"text\"\n              name=\"note-name\"\n              className=\"pa2 ba w-100\"\n              placeholder=\"Note Name\"\n              minLength=\"4\"\n              maxLength=\"75\"\n            ></input>\n            <label className=\"mt2 fw6\" htmlFor=\"note-data\">\n              Text:\n            </label>\n            <textarea\n              onChange={this.onInputChange}\n              name=\"note-data\"\n              className=\"pa2 ba w-100\"\n              placeholder=\"Enter text (max 1000 char.)\"\n              maxLength=\"1000\"\n            ></textarea>\n            <div\n              className=\"mt4 flex\"\n              style={{ justifyContent: \"space-evenly\" }}\n            >\n              <button\n                className=\"b pa2 grow pointer hover-white w-40 bg-light-green b--black-20\"\n                onClick={this.onSave}\n              >\n                Save\n              </button>\n              <button\n                className=\"b pa2 grow pointer hover-white w-40 bg-light-red b--black-20\"\n                onClick={toggleModal}\n              >\n                Cancel\n              </button>\n            </div>\n          </main>\n        </article>\n      </div>\n    );\n  }\n}\nexport default NoteAdd;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Modal.css';\r\n\r\nconst modalRoot = document.getElementById('modal-root');\r\n\r\nclass Modal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.el = document.createElement('div');\r\n  }\r\n\r\n  componentDidMount() {\r\n    modalRoot.appendChild(this.el);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    modalRoot.removeChild(this.el);\r\n  }\r\n\r\n  render() {\r\n    return ReactDOM.createPortal(\r\n      this.props.children,\r\n      this.el,\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;","import React from \"react\";\n\nclass NoteCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editMode: false,\n      name: \"\",\n      data: \"\",\n      id: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      name: this.props.name,\n      data: this.props.data,\n      id: this.props.id,\n    });\n  }\n\n  deleteNote = () => {\n    this.props.onNoteDelete(this.state.id);\n  };\n\n  updateNote = () => {\n    this.props.onNoteUpdate({\n      name: this.state.name,\n      data: this.state.data,\n      id: this.state.id,\n      renderNote: true,\n    });\n    this.setState({ editMode: false });\n  };\n\n  toggleEdit = () => {\n    this.setState((state) => ({\n      ...state,\n      editMode: !state.editMode,\n    }));\n  };\n\n  onInputChange = (event) => {\n    switch (event.target.name) {\n      case \"note-name\":\n        this.setState({ name: event.target.value });\n        break;\n      case \"note-data\":\n        this.setState({ data: event.target.value });\n        break;\n      default:\n        return;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"bg-light-green br3 pa3 w5 ma4 bw2 dib shadow-5\">\n        {!this.state.editMode ? (\n          <>\n            <div className=\"fr f2\" onClick={this.deleteNote}>\n              &times;\n            </div>\n            <div className=\"fl f3 mt1\" onClick={this.toggleEdit}>\n              &#x270E;\n            </div>\n            <h2\n              className=\"tc\"\n              style={{\n                wordWrap: \"break-word\",\n                whiteSpace: \"pre-wrap\",\n                wordBreak: \"break-word\",\n              }}\n            >\n              {this.state.name}\n            </h2>\n            <p\n              style={{\n                wordWrap: \"break-word\",\n                whiteSpace: \"pre-wrap\",\n                wordBreak: \"break-word\",\n              }}\n            >\n              {this.state.data}\n            </p>\n          </>\n        ) : (\n          <div>\n            <label className=\"mt2 fw6\" htmlFor=\"note-name\">\n              Name:\n            </label>\n            <input\n              onChange={this.onInputChange}\n              type=\"text\"\n              name=\"note-name\"\n              className=\"pa2 ba w-100\"\n              placeholder=\"Note Name\"\n              minLength=\"4\"\n              maxLength=\"75\"\n              value={this.state.name}\n            ></input>\n            <label className=\"mt2 fw6\" htmlFor=\"note-data\">\n              Text:\n            </label>\n            <textarea\n              onChange={this.onInputChange}\n              name=\"note-data\"\n              className=\"pa2 ba w-100\"\n              placeholder=\"Enter text (max 1000 char.)\"\n              maxLength=\"1000\"\n              value={this.state.data}\n            ></textarea>\n            <div\n              className=\"mt4 flex\"\n              style={{ justifyContent: \"space-evenly\" }}\n            >\n              <button\n                className=\"b pa2 grow pointer hover-white w-40 bg-light-green b--black-20\"\n                onClick={this.updateNote}\n              >\n                Save\n              </button>\n              <button\n                className=\"b pa2 grow pointer hover-white w-40 bg-light-red b--black-20\"\n                onClick={this.toggleEdit}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NoteCard;\n","import React from \"react\";\nimport NoteCard from \"./NoteCard\";\n\nclass NoteList extends React.Component {\n  render() {\n    return (\n      <div>\n        {this.props.notes.map((note, i) => {\n          return (\n            <NoteCard\n              key={i}\n              id={note.id}\n              name={note.name}\n              data={note.data}\n              onNoteDelete={this.props.onNoteDelete}\n              onNoteUpdate={this.props.onNoteUpdate}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default NoteList;\n","import React, { Component } from \"react\";\nimport NoteAdd from \"./components/NoteAdd/NoteAdd\";\nimport Modal from \"./components/Modal/Modal\";\nimport NoteList from \"./components/NoteList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isModalOpen: false,\n      noteId: 0,\n      noteName: \"\",\n      noteData: \"\",\n      renderNote: true,\n      notesArray: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadNotesFromLocalStorage();\n  }\n\n  loadNotesFromLocalStorage = () => {\n    if (localStorage.length !== 0) {\n      let arrayWithOldNotes = [];\n      Object.keys(localStorage).forEach((key, i) => {\n        arrayWithOldNotes.push({\n          id: localStorage.getItem(key).slice(-1),\n          name: localStorage.getItem(key).split(\",\")[0],\n          data: localStorage.getItem(key).split(\",\")[1],\n          renderNote: true,\n        });\n      });\n      arrayWithOldNotes.sort((a, b) => parseFloat(a.id) - parseFloat(b.id));\n      this.setState({\n        notesArray: arrayWithOldNotes,\n        noteId: arrayWithOldNotes.length,\n      });\n    } else {\n      return;\n    }\n  };\n\n  toggleModal = () => {\n    this.setState((state) => ({\n      ...state,\n      isModalOpen: !state.isModalOpen,\n    }));\n  };\n\n  onNoteSave = (note) => {\n    this.setState({\n      notesArray: [...this.state.notesArray, note],\n      noteId: note.id + 1,\n      isModalOpen: false,\n    });\n    localStorage.setItem(`Note ${this.state.noteId}`, [\n      note.name,\n      note.data,\n      `id: ${this.state.noteId}`,\n    ]);\n  };\n\n  onNoteUpdate = (noteToUpdate) => {\n    let newNotesArray = [];\n\n    for (let i = 0; i < this.state.notesArray.length; i++) {\n      if (this.state.notesArray[i].id === noteToUpdate.id) {\n        newNotesArray.push(noteToUpdate);\n      } else {\n        newNotesArray.push(this.state.notesArray[i]);\n      }\n    }\n    localStorage.setItem(`Note ${noteToUpdate.id}`, [\n      noteToUpdate.name,\n      noteToUpdate.data,\n      `id:${noteToUpdate.id}`,\n    ]);\n    this.setState({ notesArray: newNotesArray });\n  };\n\n  onNoteDelete = (noteIdToDelete) => {\n    localStorage.removeItem(`Note ${noteIdToDelete}`);\n    let newNotesArray = [...this.state.notesArray];\n    delete newNotesArray[noteIdToDelete];\n    this.setState({ notesArray: newNotesArray });\n  };\n\n  render() {\n    const { isModalOpen, notesArray, noteId } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"tc\">\n          <h1 className=\"f1\">Notes</h1>\n          <button onClick={this.toggleModal}>Add Note</button>\n        </header>\n        {this.state.isModalOpen && (\n          <Modal>\n            <NoteAdd\n              toggleModal={this.toggleModal}\n              NoteSave={this.onNoteSave}\n              isModalOpen={isModalOpen}\n              id={noteId}\n            />\n          </Modal>\n        )}\n        <div>\n          <NoteList\n            notes={notesArray}\n            onNoteDelete={this.onNoteDelete}\n            onNoteUpdate={this.onNoteUpdate}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}